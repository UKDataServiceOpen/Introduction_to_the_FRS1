[
  {
    "objectID": "Merging Data and Applying Weights_Using SPSS.html",
    "href": "Merging Data and Applying Weights_Using SPSS.html",
    "title": "Exercise 2 : Using SPSS",
    "section": "",
    "text": "Since the FRS data are structured as a relational database collected at different levels—households, families (benefit units), and individuals (persons)—and provided in multiple files, you may at some point want to conduct analysis across different levels. Some files focus on specialised topics such as assets, childcare, mortgages, and pensions, which may require exploring associations between variables entered in separate files.\nFor example, what if we want to examine how pension type varies across genders?\nIn that case, it is necessary to combine data, as the two variables of interest are entered in different FRS datasets.\nIn this exercise, we will show how to merge data from the 2022–2023 Family Resources Survey (FRS) to explore the association between variables available in various FRS datasets. We will also assess the effect of survey weights on the results using SPSS.",
    "crumbs": [
      "Merging Data and Applying Weights",
      "Exercise 2 : Using SPSS"
    ]
  },
  {
    "objectID": "Merging Data and Applying Weights_Using SPSS.html#the-dataset",
    "href": "Merging Data and Applying Weights_Using SPSS.html#the-dataset",
    "title": "Exercise 2 : Using SPSS",
    "section": "1. The dataset",
    "text": "1. The dataset\nThe dataset we will be using in this exercise is the Family Resources Survey, 2022-2023. These data are safeguarded. You can download them from the UK Data Service after registration.\nTo get the Family Resources Survey (FRS), 2022-2023 dataset, go to the data catalogue page, login to your account (create an account if you do not already have one), download and save the SPSS version, which we will use in this exercise.\nCreate a new folder to save the downloaded data and analysis work in appropriate location on your machine and give that folder a name.\nThe exercise below assumes that the dataset has been saved in a new folder named UKDS on your Desktop (Windows computers). The path would typically be C:\\\\Users\\\\YOUR_USER_NAME\\\\Desktop\\\\UKDS. You can change it to the location that best suits you.\nRemember to adjust the code below to match the location of the data on your machine.\nThe FRS is a hierarchical dataset provided every year in multiple data files (known as ‘tables’ in the FRS language). The number of these tables varies, depending on the year of the survey. The 2022-2023 FRS has 25 tables. In this exercise, we will use the general-purpose table “adult.sav” and the specialised table “pension.sav” to:\n\nMerge datasets to explore the association between variables available in different FRS tables.\nApply the survey weights and compare unweighted and weighted frequencies and percentages.",
    "crumbs": [
      "Merging Data and Applying Weights",
      "Exercise 2 : Using SPSS"
    ]
  },
  {
    "objectID": "Merging Data and Applying Weights_Using SPSS.html#setting-up-spss",
    "href": "Merging Data and Applying Weights_Using SPSS.html#setting-up-spss",
    "title": "Exercise 2 : Using SPSS",
    "section": "2. Setting up SPSS",
    "text": "2. Setting up SPSS\n\nSetting up and showing the working directory\nFirst, define the location of the working directory at the beginning of your SPSS syntax file. You can do this using thecd command, which stands for “change directory”.\nYou can check the working directory using the show DIRECTORY command.\ncd 'C:\\Users\\YOUR_USER_NAME\\Desktop\\UKDS'.\n  show DIRECTORY.\nNote: change the command above to match your working directory.\n\n\n\nOutput of the show DIRECTORY command\n\n\n\n\nOpening the two FRS tables in SPSS format in R\nWe start by opening the four datasets adult.sav and pension.sav that we will be using in this exercise. If you have your working directory saved to the folder location, the following code should open these datasets:\nGET FILE='UKDA-9252-spss/spss/spss28/adult.sav'.\nGET FILE='UKDA-9252-spss/spss/spss28/pension.sav'.",
    "crumbs": [
      "Merging Data and Applying Weights",
      "Exercise 2 : Using SPSS"
    ]
  },
  {
    "objectID": "Merging Data and Applying Weights_Using SPSS.html#preparing-the-datasets",
    "href": "Merging Data and Applying Weights_Using SPSS.html#preparing-the-datasets",
    "title": "Exercise 2 : Using SPSS",
    "section": "3. Preparing the datasets",
    "text": "3. Preparing the datasets\nAfter opening the FRS tables, we begin with exploring the adult.sav and pension.sav datasets.\nBut first, we will have a quick look at the number of observations (cases) and the number of the variables in these tables. You can do this by either inspect variables and cases in the Data view or use the codes below to produce a summary of all the variables in each dataset. We will start with the adult.sav dataset as follows:\nGET FILE='UKDA-9252-spss/spss/spss28/adult.sav'.\n  CODEBOOK all.\n\n\n\nSPSS codebook output of the first variable in adult.sav dataset\n\n\nYou can repeat the same steps to get a summary of all the variables in pension.sav dataset as follows:\nGET FILE='UKDA-9252-spss/spss/spss28/pension.sav'.\n  CODEBOOK all.\nYou can see that frs_adult2223 table has 587 variables. The specialised table frs_pension2223 has less variables (50 variables).",
    "crumbs": [
      "Merging Data and Applying Weights",
      "Exercise 2 : Using SPSS"
    ]
  },
  {
    "objectID": "Merging Data and Applying Weights_Using SPSS.html#the-variables",
    "href": "Merging Data and Applying Weights_Using SPSS.html#the-variables",
    "title": "Exercise 2 : Using SPSS",
    "section": "4. The variables",
    "text": "4. The variables\nIn this exercise, we will use only a few variables from each table. Therefore, we will create subset datasets from these two tables, containing the variables needed for the exercise. The tables below display the selected variables (names and labels) from each table.\n\n\n\n\n\n\n\nVariable name\nVariable label\n\n\n\n\nVariables from the frs_adult2223 table\n\n\n\nSERNUM\nSernum\n\n\nBENUNIT\nBenefit Unit\n\n\nPERSON\nPerson\n\n\nHEALTH1\nWhether has a long standing illness\n\n\nSEX\nSex\n\n\nIAGEGR4\nIndividual Adult 5 Year Age Bands - Anon\n\n\nGROSS4\nGrossing variable\n\n\nVariables from the frs_pension2223 table\n\n\n\nSERNUM\nSernum\n\n\nBENUNIT\nBenefit Unit\n\n\nPERSON\nPerson\n\n\nPENPAY\nAmount of last payment from pension (continuous variable)\n\n\nPENTYPE\nPension Type\n\n\n\n#Create subset datasets from the original data files\n#Use match files and Keep commands\n#The code below just keeps the variables we are interested in. We will name the new datasets as frs_adult2223_short and frs_pension2223.\n\nGET FILE='UKDA-9252-spss/spss/spss28/adult.sav'.\nmatch files FILE = */keep SERNUM, BENUNIT, PERSON, GROSS4, HEALTH1, SEX, IAGEGR4\nSave OUTFILE='frs_adult2223_short.sav'\n/COMPRESSED\n\n\n\nVariable view of the frs_adult2223_short subset data\n\n\nGET FILE='UKDA-9252-spss/spss/spss28/pension.sav'.\nmatch files FILE = */keep SERNUM, BENUNIT, PERSON, PENPAY, PENTYPE\nSave OUTFILE='frs_pension2223_short.sav'\n    /COMPRESSED \n\n\n\nVariable view of the frs_pension2223_short subset data",
    "crumbs": [
      "Merging Data and Applying Weights",
      "Exercise 2 : Using SPSS"
    ]
  },
  {
    "objectID": "Merging Data and Applying Weights_Using R.html",
    "href": "Merging Data and Applying Weights_Using R.html",
    "title": "Exercise 2 : Using R",
    "section": "",
    "text": "Since the FRS data are structured as a relational database collected at different levels—households, families (benefit units), and individuals (persons)—and provided in multiple files, you may at some point want to conduct analysis across different levels. Some files focus on specialised topics such as assets, childcare, mortgages, and pensions, which may require exploring associations between variables entered in separate files.\nFor example, what if we want to examine how pension type varies across genders?\nIn that case, it is necessary to combine data, as the two variables of interest are entered in different FRS datasets.\nIn this exercise, we will show how to merge data from the 2022–2023 Family Resources Survey (FRS) to explore the association between variables available in various FRS datasets. We will also assess the effect of survey weights on the results using R.",
    "crumbs": [
      "Merging Data and Applying Weights",
      "Exercise 2 : Using R"
    ]
  },
  {
    "objectID": "Merging Data and Applying Weights_Using R.html#the-dataset",
    "href": "Merging Data and Applying Weights_Using R.html#the-dataset",
    "title": "Exercise 2 : Using R",
    "section": "1. The dataset",
    "text": "1. The dataset\nThe dataset we will be using in this exercise is the Family Resources Survey, 2022-2023. These data are safeguarded. You can download them from the UK Data Service after registration.\nTo get the Family Resources Survey (FRS), 2022-2023 dataset, go to the data catalogue page, login to your account (create an account if you do not already have one), download and save the SPSS version, which we will use in this exercise.\nCreate a new folder to save the downloaded data and analysis work in appropriate location on your machine and give that folder a name.\nThe exercise below assumes that the dataset has been saved in a new folder named UKDS on your Desktop (Windows computers). The path would typically be C:\\\\Users\\\\YOUR_USER_NAME\\\\Desktop\\\\UKDS. You can change it to the location that best suits you.\nRemember to adjust the code below to match the location of the data on your machine.\nThe FRS is a hierarchical dataset provided every year in multiple data files (known as ‘tables’ in the FRS language). The number of these tables varies, depending on the year of the survey. The 2022-2023 FRS has 25 tables. In this exercise, we will use the general-purpose table “adult.sav” and the specialised table “pension.sav” to:\n\nMerge datasets to explore the association between variables available in different FRS tables.\nApply the survey weights and compare unweighted and weighted frequencies and percentages.",
    "crumbs": [
      "Merging Data and Applying Weights",
      "Exercise 2 : Using R"
    ]
  },
  {
    "objectID": "Merging Data and Applying Weights_Using R.html#setting-up-r",
    "href": "Merging Data and Applying Weights_Using R.html#setting-up-r",
    "title": "Exercise 2 : Using R",
    "section": "2. Setting up R",
    "text": "2. Setting up R\nWe start with loading all R packages we will be using for this exercise, set the working directory, and import (read) the data into R.\n\nLoading the R packages\n\nlibrary(dplyr)      # Data manipulation functions\nlibrary(Hmisc)      # Extra statistical functions\nlibrary(tidyverse)  # Data manipulation and visualization\nlibrary(janitor)    # Data cleaning and summary table\nlibrary(knitr)      # Tables in Quarto\n\n\n\nSetting up the working directory\nNote: Adjust the setwd() command below to match the location of the data on your computer\nsetwd(“C:_Username_here”) # Setting up the working directory\ngetwd() # getting the working directory\n\n\nImporting (reading) data into R\nThere are several packages for importing data with different formats into R. The most used packages are haven, foreign, and readr.\nIn this exercise, we use the haven package to import the four FRS tables that we will work with as SPSS files.\n\nlibrary(haven)                    # load the package haven \n\nNote: If the package haven is already installed in the R environment, you just need to recall it from the R library using the function library(haven). If not, you can install it using: install.packages(\"haven\").\nFor instructions and information about some R packages for importing data with different format into R, see our Data Skills Module: Exploring crime surveys with R.\n\n\nOpening the two FRS tables in SPSS format in R\nNext, we assign a name to the data we want to import into R. We will name the two FRS tables that we want to import to R as frs_adult2223 and frs_pension2223.\n\n# assign names to the data we want to import into R\n\nfrs_adult2223 &lt;- read_sav (\"UKDA-9252-spss/spss/spss28/adult.sav\") \nfrs_pension2223 &lt;- read_sav (\"UKDA-9252-spss/spss/spss28/pension.sav\")",
    "crumbs": [
      "Merging Data and Applying Weights",
      "Exercise 2 : Using R"
    ]
  },
  {
    "objectID": "Merging Data and Applying Weights_Using R.html#preparing-the-datasets",
    "href": "Merging Data and Applying Weights_Using R.html#preparing-the-datasets",
    "title": "Exercise 2 : Using R",
    "section": "3. Preparing the datasets",
    "text": "3. Preparing the datasets\nAfter loading the FRS tables into R, we begin with exploring the frs_adult2223 and frs_pension2223 datasets.\nBut first, we will have a quick look at the number of observations and the number of the variables in these tables using the dim() function:\n\ndim(frs_adult2223)          #Gives the number of rows (observations) and columns (variables) in the frs_adult2223 file\n\n[1] 42480   587\n\n\n\ndim(frs_pension2223)        #Gives the number of rows (observations) and columns (variables) in the frs_pension2223 file\n\n[1] 15233    50\n\n\nYou can see that frs_adult2223 table has 587 variables. The specialised table frs_pension2223 has less variables (50 variables).",
    "crumbs": [
      "Merging Data and Applying Weights",
      "Exercise 2 : Using R"
    ]
  },
  {
    "objectID": "Merging Data and Applying Weights_Using R.html#the-variables",
    "href": "Merging Data and Applying Weights_Using R.html#the-variables",
    "title": "Exercise 2 : Using R",
    "section": "4. The variables",
    "text": "4. The variables\nIn this exercise, we will use only a few variables from each table. Therefore, we will create subset datasets from these two tables, containing the variables needed for the exercise. The tables below display the selected variables (names and labels) from each table.\n\n\n\n\n\n\n\nVariable name\nVariable label\n\n\n\n\nVariables from the frs_adult2223 table\n\n\n\nSERNUM\nSernum\n\n\nBENUNIT\nBenefit Unit\n\n\nPERSON\nPerson\n\n\nHEALTH1\nWhether has a long standing illness\n\n\nSEX\nSex\n\n\nIAGEGR4\nIndividual Adult 5 Year Age Bands - Anon\n\n\nGROSS4\nGrossing variable\n\n\nVariables from the frs_pension2223 table\n\n\n\nSERNUM\nSernum\n\n\nBENUNIT\nBenefit Unit\n\n\nPERSON\nPerson\n\n\nPENPAY\nAmount of last payment from pension (continuous variable)\n\n\nPENTYPE\nPension Type\n\n\n\n\n#Create subset datasets from the original data files  \n#use a pipeline (the %&gt;% operator)  \n#and the \"select\" function from the dplyr package \n#the code below only selects the variables we are interested in\n#We will name the new datasets as frs_adult2223_short and frs_pension2223. \n\nfrs_adult2223_short &lt;- frs_adult2223 %&gt;% select (SERNUM, BENUNIT, PERSON, GROSS4, HEALTH1, SEX, IAGEGR4) \nfrs_pension2223_short &lt;- frs_pension2223%&gt;% select (SERNUM, BENUNIT, PERSON, PENPAY, PENTYPE)",
    "crumbs": [
      "Merging Data and Applying Weights",
      "Exercise 2 : Using R"
    ]
  },
  {
    "objectID": "Merging Data and Applying Weights_Using R.html#examining-the-variables",
    "href": "Merging Data and Applying Weights_Using R.html#examining-the-variables",
    "title": "Exercise 2 : Using R",
    "section": "Examining the variables",
    "text": "Examining the variables\nLet’s now examine the frequency of the variables HEALTH1, SEX, and IAGEGR4 in the frs_adult2223_short dataset.\nWe can use the table() function to create a frequency table.\n\ntable (frs_adult2223_short$HEALTH1)     #Create a frequency table for the variable HEALTH1 \n\n\n    1     2 \n18308 24172 \n\n\n\ntable(frs_adult2223_short$SEX)          #Create a frequency table for the variable SEX\n\n\n    1     2 \n20143 22337 \n\n\n\ntable(frs_adult2223_short$IAGEGR4)      #Create a frequency table for the variable IAGEGR4\n\n\n   4    5    6    7    8    9   10   11   12   13   14   15   16 \n 587 1864 2506 3108 3341 3367 3002 3401 3763 3894 3751 3830 6066 \n\n\nWe can use the as_factor() function (included in the haven package) to convert the categorical variables HEALTH1, SEX, and IAGEGR4 into factor variables. The newly generated factor variables HEALTH1f, SEXf, and IAGEGR4f are equivalent to categorical variables.\n\nfrs_adult2223_short$HEALTH1f&lt;-as_factor(frs_adult2223_short$HEALTH1)      #Create a new factor variable HEALTH1f from the original variable HEALTH1\n\n\nfrs_adult2223_short$SEXf&lt;-as_factor(frs_adult2223_short$SEX)            # Create a new factor variable SEXf from the original variable SEX     \n\n\nfrs_adult2223_short$IAGEGR4f&lt;-as_factor(frs_adult2223_short$IAGEGR4)    # Create a new factor variable IAGEGR4f from the original variable IAGEGR4\n\n\ntable(frs_adult2223_short$HEALTH1f)       # Create a frequency table for the new factor variable HEALTH1f\n\n\n  Yes    No \n18308 24172 \n\n\n\ntable(frs_adult2223_short$SEXf)           # Create a frequency table for the new factor variable SEXf\n\n\n  Male Female \n 20143  22337 \n\n\n\ntable(frs_adult2223_short$IAGEGR4f)       # Create a frequency table for the new factor variable IAGEGR4f\n\n\n  Age 16 to 19   Age 20 to 24   Age 25 to 29   Age 30 to 34   Age 35 to 39 \n           587           1864           2506           3108           3341 \n  Age 40 to 44   Age 45 to 49   Age 50 to 54   Age 55 to 59   Age 60 to 64 \n          3367           3002           3401           3763           3894 \n  Age 65 to 69   Age 70 to 74 Age 75 or over \n          3751           3830           6066 \n\n\nLet’s now examine the frequency of the variable PENTYPE in the frs_ frs_pension2223_short dataset.\n\ntable (frs_pension2223_short$PENTYPE)       # Create a frequency table for the variable PENTYPE\n\n\n    1     2     3     4     5     6 \n11156  2845   880   211    53    88 \n\n\n\nfrs_pension2223_short$PENTYPEf&lt;-as_factor(frs_pension2223_short$PENTYPE)    # Create a new factor variable PENTYPEf from the original variable 'PENTYPE’\n\n\ntable(frs_pension2223_short$PENTYPEf)       # Create a frequency table for the new factor variable PENTYPEf\n\n\n  Employee pension - occupational, workplace, group personal \n                                                       11156 \n                                 Individual personal pension \n                                                        2845 \nSurvivor‹s pension (workplace or individual personal pension \n                                                         880 \n   Income from an annuity ’ not purchased with pension funds \n                                                         211 \n                             Income from a trust or covenant \n                                                          53 \nShare of employee or personal pension from ex-spouse/partner \n                                                          88 \n\n\nThe amount of last payment from pension PENPAY is a continuous variable. So, we will use summary() instead of table(). The summary() function provides a summary of the main statistics including the minimum and maximum values, the mean, the median and the quartiles. This function is useful for assessing and detecting extreme values.\n\n summary(frs_pension2223_short$PENPAY)      #Create a summary table for the variable PENPAY\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.      NA's \n   0.0002   32.2192   88.1425  155.2260  211.2370 1562.5645       490",
    "crumbs": [
      "Merging Data and Applying Weights",
      "Exercise 2 : Using R"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using SPSS.html",
    "href": "Hierarchical and Flat File_Using SPSS.html",
    "title": "Exercise 1 : Using SPSS",
    "section": "",
    "text": "In this exercise, we use data from the Family Resources Survey (FRS), 2022-2023 financial year to get familiar with the hierarchical and flat file datasets using SPSS.",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using SPSS"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using SPSS.html#the-dataset",
    "href": "Hierarchical and Flat File_Using SPSS.html#the-dataset",
    "title": "Exercise 1 : Using SPSS",
    "section": "1. The dataset",
    "text": "1. The dataset\nThe dataset we will be using in this exercise is the Family Resources Survey, 2022-2023. These data are safeguarded. You can download them from the UK Data Service after registration.\nTo get the Family Resources Survey (FRS), 2022-2023 dataset, go to the data catalogue page, login to your account (create an account if you do not already have one), download and save the SPSS version, which we will use in this exercise.\nCreate a new folder to save the downloaded data and analysis work in appropriate location on your machine and give that folder a name.\nThe exercise below assumes that the dataset has been saved in a new folder named UKDS on your Desktop (Windows computers). The path would typically be C:\\\\Users\\\\YOUR_USER_NAME\\\\Desktop\\\\UKDS. You can change it to the location that best suits you.\nRemember to adjust the code below to match the location of the data on your machine.\nThe FRS is a hierarchical dataset provided every year in multiple data files (known as ‘tables’ in the FRS language). The number of these tables varies, depending on the year of the survey. The 2022-2023 FRS has 25 tables. In this exercise, we will use the two general-purpose tables “adult.sav” and “benunit.sav” as well as the specialised table “pension.sav” and the FRS flat file “frs2223.sav” to:\n\nMake a subset of the datasets.\nExplore the variables in each dataset by conducting descriptive analysis (frequency tables, summary statistics and cross tabulation).",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using SPSS"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using SPSS.html#setting-up-spss",
    "href": "Hierarchical and Flat File_Using SPSS.html#setting-up-spss",
    "title": "Exercise 1 : Using SPSS",
    "section": "2. Setting up SPSS",
    "text": "2. Setting up SPSS\n\nSetting up and showing the working directory\nFirst, define the location of the working directory at the beginning of your SPSS syntax file. You can do this using thecd command, which stands for “change directory”.\nYou can check the working directory using the show DIRECTORY command.\ncd 'C:\\Users\\YOUR_USER_NAME\\Desktop\\UKDS'.\n  show DIRECTORY.\nNote: change the command above to match your working directory.\n\n\n\nOutput of the show DIRECTORY command\n\n\n\n\nOpening the four FRS tables\nWe start by opening the four datasets adult.sav, benunit.sav, pension.sav and frs2223.sav that we will be using in this exercise. If you have your working directory saved to the folder location, the following code should open these datasets:\nGET FILE='UKDA-9252-spss/spss/spss28/adult.sav'.\nGET FILE='UKDA-9252-spss/spss/spss28/benunit.sav'.\nGET FILE='UKDA-9252-spss/spss/spss28/pension.sav'.\nGET FILE='UKDA-9252-spss/spss/spss28/frs2223.sav'.",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using SPSS"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using SPSS.html#preparing-the-datasets",
    "href": "Hierarchical and Flat File_Using SPSS.html#preparing-the-datasets",
    "title": "Exercise 1 : Using SPSS",
    "section": "3. Preparing the datasets",
    "text": "3. Preparing the datasets\nAfter opening the FRS tables, we begin with exploring the adult.sav, benunit.sav, pension.sav and frs2223.sav datasets.\nBut first, we will have a quick look at the number of observations (cases) and the number of the variables in these tables. You can do this by either inspect variables and cases in the Data view or use the codes below to produce a summary of all the variables in each dataset. We will start with the adult.sav dataset as follows:\nGET FILE='UKDA-9252-spss/spss/spss28/adult.sav'.\n  CODEBOOK all.\n\n\n\nSPSS codebook output of the first variable in adult.sav dataset\n\n\nYou can repeat the same steps to get a summary of all the variables in benunit.sav, pension.sav and frs2223.sav datasets as follows:\nGET FILE='UKDA-9252-spss/spss/spss28/benunit.sav'.\n  CODEBOOK all.\n\nGET FILE='UKDA-9252-spss/spss/spss28/pension.sav'.\n  CODEBOOK all.\n\nGET FILE='UKDA-9252-spss/spss/spss28/frs2223.sav'.\n  CODEBOOK all.\nYou will notice that the frs2223.sav table has the largest number of variables (7,070 variables). The adult.sav table has 587 variables, the benunit.sav table has 276 variables, and the pension.sav table has 50 variables.\n\nQuestionsAnswers\n\n\n\nWhy is the number of the variables in the pension.sav table the smallest?\nWhich table has the smallest number of observations?\nWhich tables have the same numbers of observations? Why?\n\n\n\n\nThese tables have different units of analysis. The adult table include data at the individual level, the benunit and the frs2223 tables have data at the benefit unit (family) level. The pension table is a specialised data that can be analysed at person, benefit unit and household level, which is a subset data representing participants who are receiving income from a pension (see the FRS documentation for the definition of each level).\nThe pension table has the smallest number of observations (15233 observations).\nThe frs2223 and benunit have the same numbers of observations (28629). Because both tables include data at benefit unit level.",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using SPSS"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using SPSS.html#the-variables",
    "href": "Hierarchical and Flat File_Using SPSS.html#the-variables",
    "title": "Exercise 1 : Using SPSS",
    "section": "4. The variables",
    "text": "4. The variables\nWe will only be using a few variables from each table in this exercise. So, we will create subsets data from these four tables, containing the variables we will use in this exercise. The tables below shows the variables (names and labels) that we will select from each FRS table.\n\n\n\n\n\n\n\nVariable name\nVariable label\n\n\n\n\nVariables from the adult table\n\n\n\nSERNUM\nSernum\n\n\nBENUNIT\nBenefit Unit\n\n\nPERSON\nPerson\n\n\nHEALTH1\nWhether has a long standing illness\n\n\nSEX\nSex\n\n\nIAGEGR4\nIndividual Adult 5 Year Age Bands - Anon\n\n\nGROSS4\nGrossing variable\n\n\nVariables from the benunit table\n\n\n\nSERNUM\nSernum\n\n\nBENUNIT\nBenefit Unit\n\n\nfamtypbu\nFamily Type\n\n\nVariables from the pension table\n\n\n\nSERNUM\nSernum\n\n\nBENUNIT\nBenefit Unit\n\n\nPERSON\nPerson\n\n\nPENPAY\nAmount of last payment from pension (continuous variable)\n\n\nPENTYPE\nPension Type\n\n\nVariables from the frs2223 table\n\n\n\nSERNUM\nSernum\n\n\nBENUNIT\nBenefit Unit\n\n\nPERSON\nPerson\n\n\nHEALTHHD\nWhether has a long standing illness\n\n\nSEX\nSex\n\n\nFAMTYPBU\nFamily Type\n\n\n\n#Create subset datasets from the original data files\n#Use match files and Keep commands\n#The code below just keeps the variables we are interested in. We will name the new datasets as frs_adult2223_short, frs_benunit2223_short, frs_pension2223, and frs_frs2223_short, respectively.\n\nGET FILE='UKDA-9252-spss/spss/spss28/adult.sav'.\nmatch files FILE = */keep SERNUM, BENUNIT, PERSON, GROSS4, HEALTH1, SEX, IAGEGR4\nSave OUTFILE='frs_adult2223_short.sav'\n/COMPRESSED\n\n\n\nVariable view of the frs_adult2223_short subset data\n\n\nGET FILE='UKDA-9252-spss/spss/spss28/benunit.sav'.\nmatch files FILE = */keep SERNUM, BENUNIT, famtypbu\nSave OUTFILE='frs_benunit2223_short.sav'\n    /COMPRESSED   \n \nGET FILE='UKDA-9252-spss/spss/spss28/pension.sav'.\nmatch files FILE = */keep SERNUM, BENUNIT, PERSON, PENPAY, PENTYPE\nSave OUTFILE='frs_pension2223_short.sav'\n    /COMPRESSED \n\nGET FILE='UKDA-9252-spss/spss/spss28/frs2223.sav'.\nmatch files FILE = */keep SERNUM, BENUNIT, PERSONHD, HEALTHHD, SEXHD, FAMTYPBU \n    Save OUTFILE='frs_frs2223_short.sav'\n    /COMPRESSED",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using SPSS"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using SPSS.html#explore-the-datasets",
    "href": "Hierarchical and Flat File_Using SPSS.html#explore-the-datasets",
    "title": "Exercise 1 : Using SPSS",
    "section": "Explore the datasets",
    "text": "Explore the datasets\nLet’s start by having a quick look at the three newly generated datasets frs_adult2223_short, frs_benunit222_short and frs_pension2223_short.\nWe will start with the frs_adult2223_short dataset. Either inspect variables and cases in the Data View or use the code below to display a dictionary of all the variables in the dataset.\nGET FILE='UKDA-9252-spss/spss/frs_adult2223_short.sav'.\n    DISPLAY DICTIONARY.\n\n\n\nSPSS dictionary for frs_adult2223_short dataset\n\n\nNow, let’s have a quick look at the frs_benunit2223_short dataset.\n\nGET FILE='UKDA-9252-spss/spss/frs_benunit2223_short.sav'.\n    DISPLAY DICTIONARY.\n\n\n\nSPSS dictionary for frs_benunit2223_short dataset\n\n\nYou can have a comprehensive information about the data using the codebook command. So, let’s explore frs_adult2223_short and frs_benunit2223_short datasets.\nGET FILE='UKDA-9252-spss/spss/frs_adult2223_short.sav'.\n    CODEBOOK all.\n\n\n\nSPSS codebook output of the first three variables in frs_adult2223_short dataset\n\n\nGET FILE='UKDA-9252-spss/spss/frs_benunit2223_short.sav'.\n    CODEBOOK all.\n\n\n\nSPSS codebook output of the first three variables in frs_benunit2223_short dataset\n\n\nYour turn!\nUse the frs_pension2223_short dataset to get an idea about the variables.\n\nWhat is the overall sample size of the frs_pension2223_short dataset? Use CODEBOOK command.\nList the names and labels of the variables in frs_pension2223_short dataset. Use DISPLAY DICTIONARY command.\n\nOutcome!\n\nThe overall sample size of the frs_pension2223_short dataset is 15233.\n\nGET FILE='UKDA-9252-spss/spss/frs_pension2223_short.sav'.\n  CODEBOOK all.\n\n\n\nSPSS codebook output of the first variable in frs_ pension2223_short dataset\n\n\n\nNames and labels of the variables in frs_pension2223_short dataset:\n\nGET FILE='UKDA-9252-spss/spss/frs_pension2223_short.sav'.\n  DISPLAY DICTIONARY.\n\n\n\nSPSS names and labels of the variables from frs_ pension2223_short dataset\n\n\n\nQuestionsAnswers\n\n\n\nWhat do PENPAY and PENTYPE measure and how?\nWhat is the value for ‘Amount of last pension payment’ of person 2 from benefit unit 1 with serial no. 16 in the frs_pension2223_short dataset?\n\n\n\n\nPENPAY records responses to the questions about ‘Amount of last payment from pension’. Responses are numeric. PENTYPE records responses to the questions about ‘Pension Type’. There are six possible responses to the question.\nThe value for ‘Amount of last pension payment’ of person 2 from benefit unit 1 with serial no. 16 in the frs_pension2223_short dataset is 53.00745.\n\nGET FILE='UKDA-9252-spss/spss/frs_pension2223_short.sav'.\n  CODEBOOK PENPAY PENTYPE\n\n\n\n\n\n\nSPSS codebook output of PENPAY and PENTYPE in frs_ pension2223_short dataset",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using SPSS"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using SPSS.html#descriptive-analysis",
    "href": "Hierarchical and Flat File_Using SPSS.html#descriptive-analysis",
    "title": "Exercise 1 : Using SPSS",
    "section": "Descriptive analysis",
    "text": "Descriptive analysis\n\nExamining variables\nLet’s now examine the frequency of the variables HEALTH1, SEX, and IAGEGR4 in the frs_adult2223_short dataset.\nWe can use the FREQUENCIES command to create a frequency table.\nGET FILE='UKDA-9252-spss/spss/frs_adult2223_short.sav.\nFREQUENCIES VARIABLES=HEALTH1 SEX IAGEGR4\n  /ORDER=ANALYSIS.\n\n\n\nSPSS output of frequencies of the variables HEALTH1, SEX, and IAGEGR4 in the frs_adult2223_short dataset\n\n\nLet’s now examine the frequency of the variable famtypbu in the frs_ benunit2223_short dataset.\nGET FILE='UKDA-9252-spss/spss/frs_benunit2223_short.sav'.\nFREQUENCIES VARIABLES=famtypbu\n  /ORDER=ANALYSIS.\n\n\n\nSPSS output of frequency of the variable famtypbu in the frs_benunit2223_short dataset\n\n\nThe amount of last payment from pension PENPAY is a continuous variable. So, we will use DESCRIPTIVES instead of FREQUENCIES command.\nThe DESCRIPTIVES command provides a summary of the main statistics including the rang, minimum and maximum values, the mean, and the standard deviation. This command is useful for assessing and detecting extreme values.\nGET FILE='UKDA-9252-spss/spss/frs_pension2223_short.sav'.\nDESCRIPTIVES VARIABLES=PENPAY\n  /STATISTICS=MEAN STDDEV RANGE MIN MAX.\n\n\n\nSPSS output of descriptives of the variable PENPAY in the frs_pension2223_short dataset\n\n\nYour turn!\nUse the frs_pension2223_short dataset to examine respondents’ pension type PENTYPE.\n\nCreate a frequency table to measure pension type PENTYPE. Use FREQUENCIES command.\n\nOutcome!\n\nFrequency table of PENTYPE from the frs_ pension2223_short dataset:\n\nGET FILE='UKDA-9252-spss/spss/frs_pension2223_short.sav'.  \nFREQUENCIES VARIABLES=PENTYPE\n  /ORDER=ANALYSIS.\n\n\n\nSPSS output of frequency of the variable PENTYPE in the frs_pension2223_short dataset",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using SPSS"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using SPSS.html#explore-the-datasets-1",
    "href": "Hierarchical and Flat File_Using SPSS.html#explore-the-datasets-1",
    "title": "Exercise 1 : Using SPSS",
    "section": "Explore the datasets",
    "text": "Explore the datasets\nLet’s have a look at frs_frs2223_short dataset, the short version we have created from the flat file frs_frs2223.\nEither inspect variables and cases in the Data View or use the code below to display a dictionary of all the variables in the dataset.\nGET FILE='UKDA-9252-spss/spss/frs_frs2223_short.sav'. \nDISPLAY DICTIONARY.\n\n\n\nSPSS dictionary for frs_frs2223_short dataset\n\n\nAs you know by now, you can have a comprehensive information about the data using the codebook command. So, let’s explore frs_frs2223_short dataset and know more about the variables HEALTHHD and SEXHD.\nGET FILE='UKDA-9252-spss/spss/frs_frs2223_short.sav'. \nCODEBOOK HEALTHHD SEXHD\n\n\n\nSPSS codebook output of the first three variables in frs_frs2223_short dataset\n\n\n\nQuestionsAnswers\n\n\nCompare the labels and value labels of the variables that measure long standing illness HEALTH1and Sex SEX (in the ‘frs_adult2223_short’ datasets) and Family type famtypbu (in the frs_benunit2223_short dataset) and those that measures the same variables in the frs_frs2223_short dataset (HEALTHHD, SEXHD and FAMTYPBU, respectively).\n\n\n\nLong standing illness in the ‘frs_adult2223_short’: both the lables and value labels are same as in the flat file. (b) Sex in the ‘frs_adult2223_short’: only the label is same as in the flat file. (c) Family type in the frs_benunit2223_short: both the variables labels and value labels are same as in the flat file.\n\nHowever, the variables’ names in the flat file are slightly different than those in the hierarchical files to distinguish them.",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using SPSS"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using SPSS.html#descriptive-analysis-1",
    "href": "Hierarchical and Flat File_Using SPSS.html#descriptive-analysis-1",
    "title": "Exercise 1 : Using SPSS",
    "section": "Descriptive analysis",
    "text": "Descriptive analysis\n\nExamining variables\nLet’s now examine the frequency of the variables HEALTHHD, SEXHD and FAMTYPBU in the frs_frs2223_short.\nWe will use the FREQUENCIES command to create frequency tables.\nGET FILE='UKDA-9252-spss/spss/frs_frs2223_short.sav'. \nFREQUENCIES VARIABLES=HEALTHHD SEXHD FAMTYPBU\n  /ORDER=ANALYSIS.\n\n\n\nSPSS output of frequencies of the variables HEALTHHD, SEXHD and FAMTYPBU in the frs_frs2223_short dataset\n\n\n\nQuestionsAnswers\n\n\n\nHow many observations are lone parent?\nHow many observations are not long standing illness?\nWhat do you notice about the frequencies of FAMTYPBU in frs_frs2223_short dataset and the frequencies of the same variable famtypbu in frs_benunit2223_short dataset?\n\n\n\n\nThere are 1563 lone parent.\nThere are 15854 persons responded didn’t have long standing illness.\nThe frequencies of the variables FAMTYPBU in frs_frs2223_short dataset and famtypbu in frs_benunit2223_short dataset are exactly the same as expected.",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using SPSS"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to the Family Resources Survey: R and SPSS Practical Exercises",
    "section": "",
    "text": "These practical exercises are part of the ‘Getting started with the Family Resources Survey’ online module.\nIn the exercises, we explore data from the Family Resources Survey (FRS), 2022-2023 financial year to get familiar with the datasets. We also merge data to examine the association between variables available in different FRS datasets and evaluate how survey weights affect results.\nThe exercises are created using R and SPSS.\nQuestions and answers are included to help you check your understanding of the results.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "These practical exercises are part of the ‘Getting started with the Family Resources Survey’ online module.\nIn the exercises, we use data from the Family Resources Survey (FRS), 2022-2023 financial year to:\n\nGet familiar with the datasets.\nExplore the association between variables available in different FRS datasets.\nAssess the effect of survey weights on the results.\n\nThe exercises are divided into two section:\n\nThe Hierarchical and Flat File Datasets.\nMerging Data and Applying Weights.\n\nThey are then divided into sub-sections based on the the statistical software used (R and SPSS).\nQuestions and answers are included to assess understanding of the results."
  },
  {
    "objectID": "Hierarchical and Flat File_Using R.html",
    "href": "Hierarchical and Flat File_Using R.html",
    "title": "Exercise 1 : Using R",
    "section": "",
    "text": "In this exercise, we use data from the Family Resources Survey (FRS), 2022-2023 financial year to get familiar with the hierarchical and flat file datasets using R.",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using R"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using R.html#the-dataset",
    "href": "Hierarchical and Flat File_Using R.html#the-dataset",
    "title": "Exercise 1 : Using R",
    "section": "1. The dataset",
    "text": "1. The dataset\nThe dataset we will be using in this exercise is the Family Resources Survey, 2022-2023. These data are safeguarded. You can download them from the UK Data Service after registration.\nTo get the Family Resources Survey (FRS), 2022-2023 dataset, go to the data catalogue page, login to your account (create an account if you do not already have one), download and save the SPSS version, which we will use in this exercise.\nCreate a new folder to save the downloaded data and analysis work in appropriate location on your machine and give that folder a name.\nThe exercise below assumes that the dataset has been saved in a new folder named UKDS on your Desktop (Windows computers). The path would typically be C:\\\\Users\\\\YOUR_USER_NAME\\\\Desktop\\\\UKDS. You can change it to the location that best suits you.\nRemember to adjust the code below to match the location of the data on your machine.\nThe FRS is a hierarchical dataset provided every year in multiple data files (known as ‘tables’ in the FRS language). The number of these tables varies, depending on the year of the survey. The 2022-2023 FRS has 25 tables. In this exercise, we will use the two general-purpose tables “adult.sav” and “benunit.sav” as well as the specialised table “pension.sav” and the FRS flat file “frs2223.sav” to:\n\nMake a subset of the datasets.\nExplore the variables in each dataset by conducting descriptive analysis (frequency tables, summary statistics and cross tabulation).\nAssess the results and convert the categorical variables into factor variables if needed.",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using R"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using R.html#setting-up-r",
    "href": "Hierarchical and Flat File_Using R.html#setting-up-r",
    "title": "Exercise 1 : Using R",
    "section": "2. Setting up R",
    "text": "2. Setting up R\nWe start with loading all R packages we will be using for this exercise, set the working directory, and import (read) the data into R.\n\nLoading the R packages\n\nlibrary(dplyr)      # Data manipulation functions\nlibrary(Hmisc)      # Extra statistical functions \nlibrary(tidyverse)  # Data manipulation and visualization\nlibrary(janitor)    # Data cleaning and summary table\nlibrary(knitr)      # Tables in Quarto \n\n\n\nSetting up the working directory\nNote: Adjust the setwd() command below to match the location of the data on your computer\nsetwd(“C:_Username”) # Setting up the working directory\ngetwd() # getting the working directory\n\n\nImporting (reading) data into R\nThere are several packages for importing data with different formats into R. The most used packages are haven, foreign, and readr.\nIn this exercise, we use the haven package to import the four FRS tables that we will work with as SPSS files.\n\nlibrary(haven)                    # load the package haven \n\nNote: If the package haven is already installed in the R environment, you just need to recall it from the R library using the function library(haven). If not, you can install it using: install.packages(\"haven\").\nFor instructions and information about some R packages for importing data with different format into R, see our Data Skills Module: Exploring crime surveys with R.\n\n\nOpening the four FRS tables in SPSS format in R\nNext, we assign a name to the data we want to import into R. We will name the four FRS tables that we want to import to R as frs_adult2223, frs_benunit2223, frs_pension2223 and frs_frs2223.\n\n# assign names to the data we want to import into R\n\nfrs_adult2223 &lt;- read_sav (\"UKDA-9252-spss/spss/spss28/adult.sav\") \nfrs_benunit2223 &lt;- read_sav (\"UKDA-9252-spss/spss/spss28/benunit.sav\") \nfrs_pension2223 &lt;- read_sav (\"UKDA-9252-spss/spss/spss28/pension.sav\") \nfrs_frs2223 &lt;- read_sav (\"UKDA-9252-spss/spss/spss28/frs2223.sav\")",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using R"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using R.html#preparing-the-datasets",
    "href": "Hierarchical and Flat File_Using R.html#preparing-the-datasets",
    "title": "Exercise 1 : Using R",
    "section": "3. Preparing the datasets",
    "text": "3. Preparing the datasets\nAfter loading the FRS tables into R, we begin with exploring the frs_adult2223, frs_benunit222, frs_pension2223 and frs_frs2223 tables.\nBut first, we will have a quick look at the number of observations and the number of the variables in these tables using the dim() function:\n\ndim(frs_adult2223)          #Gives the number of rows (observations) and columns (variables) in the frs_adult2223 file\n\n[1] 42480   587\n\n\n\ndim(frs_benunit2223)        #Gives the number of rows (observations) and columns (variables) in the frs_benunit2223 file\n\n[1] 28629   276\n\n\n\ndim(frs_pension2223)        #Gives the number of rows (observations) and columns (variables) in the frs_pension2223 file\n\n[1] 15233    50\n\n\n\ndim(frs_frs2223) #Gives the number of rows (observations) and columns (variables) in the frs_frs2223 file\n\n[1] 28629  7070\n\n\nYou can see that the frs_frs2223 table has the largest number of variables (7,070 variables). The frs_adult2223 table has 587 variables, the frs_benunit222 table has 276 variables, and the frs_pension2223 table has 50 variables.\n\nQuestionsAnswers\n\n\n\nWhy is the number of the variables in the frs_pension2223 table the smallest?\nWhich table has the smallest number of observations?\nWhich tables have the same numbers of observations? Why?\n\n\n\n\nThese tables have different units of analysis. The frs_adult2223 table includes data at the individual level, the frs_benunit2223 and the frs_frs2223 tables have data at the benefit unit (family) level. The frs_pension2223 table is a specialised data that can be analysed at person, benefit unit and household level. It is a subset of data representing participants who are receiving income from a pension (see the FRS documentation for the definition of each level). Therefore, the frs_pension2223 table has the smallest number of variables.\nThe frs_pension2223 table has the smallest number of observations (15233 observations).\nThe frs_frs2223 and frs_benunit2223 have the same numbers of observations (28629). Because both tables include data at benefit unit level.",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using R"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using R.html#the-variables",
    "href": "Hierarchical and Flat File_Using R.html#the-variables",
    "title": "Exercise 1 : Using R",
    "section": "4. The variables",
    "text": "4. The variables\nWe will only be using a few variables from each table in this exercise. So, we will create subsets data from these four tables, containing the variables we will use in this exercise. The tables below shows the variables (names and labels) that we will select from each FRS table.\n\n\n\n\n\n\n\nVariable name\nVariable label\n\n\n\n\nVariables from the frs_adult2223 table\n\n\n\nSERNUM\nSernum\n\n\nBENUNIT\nBenefit Unit\n\n\nPERSON\nPerson\n\n\nHEALTH1\nWhether has a long standing illness\n\n\nSEX\nSex\n\n\nIAGEGR4\nIndividual Adult 5 Year Age Bands - Anon\n\n\nGROSS4\nGrossing variable\n\n\nVariables from the frs_benunit2223 table\n\n\n\nSERNUM\nSernum\n\n\nBENUNIT\nBenefit Unit\n\n\nfamtypbu\nFamily Type\n\n\nVariables from the frs_pension2223 table\n\n\n\nSERNUM\nSernum\n\n\nBENUNIT\nBenefit Unit\n\n\nPERSON\nPerson\n\n\nPENPAY\nAmount of last payment from pension (continuous variable)\n\n\nPENTYPE\nPension Type\n\n\nVariables from the frs_frs2223 table\n\n\n\nSERNUM\nSernum\n\n\nBENUNIT\nBenefit Unit\n\n\nPERSON\nPerson\n\n\nHEALTHHD\nWhether has a long standing illness\n\n\nSEX\nSex\n\n\nFAMTYPBU\nFamily Type\n\n\n\n\n#Create subset datasets from the original data files  \n#use a pipeline (the %&gt;% operator)  \n#and the \"select\" function from the dplyr package \n#the code below only selects the variables we are interested in\n# We will name the new datasets as frs_adult2223_short, frs_benunit2223_short, frs_pension2223, and frs_frs2223_short, respectively. \n\nfrs_adult2223_short &lt;- frs_adult2223 %&gt;% select (SERNUM, BENUNIT, PERSON, GROSS4, HEALTH1, SEX, IAGEGR4) \nfrs_benunit2223_short &lt;- frs_benunit2223 %&gt;% select (SERNUM, BENUNIT, famtypbu) \nfrs_pension2223_short &lt;- frs_pension2223%&gt;% select (SERNUM, BENUNIT, PERSON, PENPAY, PENTYPE) \nfrs_frs2223_short &lt;- frs_frs2223%&gt;% select (SERNUM, BENUNIT, PERSONHD, HEALTHHD, SEXHD, FAMTYPBU)",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using R"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using R.html#explore-the-datasets",
    "href": "Hierarchical and Flat File_Using R.html#explore-the-datasets",
    "title": "Exercise 1 : Using R",
    "section": "Explore the datasets",
    "text": "Explore the datasets\nLet’s start by having a quick look at the three newly generated datasets frs_adult2223_short, frs_benunit222_short and frs_pension2223_short.\nWe will start with the frs_adult2223_short dataset. Either inspect variables and cases in the data editor [run the code View(dataframe)] or use the code below to produce a summary of the variables in the dataset.\n\ndim(frs_adult2223_short)      #Gives the number of rows (observations) and columns (variables)\n\n[1] 42480     7\n\n\n\nnames(frs_adult2223_short)    #List variable names in their actual order in the dataset\n\n[1] \"SERNUM\"  \"BENUNIT\" \"PERSON\"  \"GROSS4\"  \"HEALTH1\" \"SEX\"     \"IAGEGR4\"\n\n\n\nhead(data.frame(frs_adult2223_short))     #Displays the first six lines of a dataset\n\n  SERNUM BENUNIT PERSON GROSS4 HEALTH1 SEX IAGEGR4\n1      1       1      1    750       1   1       7\n2      1       1      2    750       2   2       7\n3      2       1      1    871       2   1       5\n4      2       2      2    871       2   1       4\n5      2       3      3    871       2   1       4\n6      3       1      1    710       2   1      10\n\n\nNote: You can use tail(data.frame(frs_adult2223_short)) to display the last few rows of a dataset.\nNow, let’s also have a look at the frs_benunit2223_short dataset.\n\ndim(frs_benunit2223_short)    #Gives the number of rows (observations) and columns (variables)\n\n[1] 28629     3\n\n\n\nnames(frs_benunit2223_short)  #List variable names in their actual order in the dataset\n\n[1] \"SERNUM\"   \"BENUNIT\"  \"famtypbu\"\n\n\n\nhead(data.frame(frs_benunit2223_short))     #Displays the first six lines of a dataset\n\n  SERNUM BENUNIT famtypbu\n1      1       1        3\n2      2       1        6\n3      2       2        6\n4      2       3        6\n5      3       1        3\n6      4       1        1\n\n\nLet’s learn more about the variables.\nNote: The  haven  R package facilitates the conversion of categorical data from SPSS or Stata into R. While it can preserve the original numeric values, it also contains attributes, which are special types of R objects with names that are accessible via the attr() function. In this context, each variable has two key attributes: a ‘label’, which is the description of the variable, and ‘labels’, which are the value labels.\nFurthermore, the haven R package allows for the conversion of these imported numeric variables into R factors. In this conversion, the factors are created with levels (i.e., categories) reflecting the value labels from SPSS or Stata.\nLet’s examine the variables’ description and value labels of HEALTH1, SEX and IAGEGR4 from frs_adult2223_short dataset, and the variables’ description and value labels of famtypbu from frs_benunit2223_short dataset.\n\ncat(attr(frs_adult2223_short$HEALTH1,\"label\"))\n\nWhether has a long standing illness\n\n\n\nnames(attr(frs_adult2223_short$HEALTH1,\"labels\"))\n\n[1] \"Yes\" \"No\" \n\n\n\ncat(attr(frs_adult2223_short$SEX,\"label\"))\n\nSex\n\n\n\nnames(attr(frs_adult2223_short$SEX,\"labels\"))\n\n[1] \"Male\"   \"Female\"\n\n\n\ncat(attr(frs_adult2223_short$IAGEGR4,\"label\"))\n\nIndividual Adult 5 Year Age Bands - Anon\n\n\n\nnames(attr(frs_adult2223_short$IAGEGR4,\"labels\"))\n\n [1] \"Age 16 to 19\"   \"Age 20 to 24\"   \"Age 25 to 29\"   \"Age 30 to 34\"  \n [5] \"Age 35 to 39\"   \"Age 40 to 44\"   \"Age 45 to 49\"   \"Age 50 to 54\"  \n [9] \"Age 55 to 59\"   \"Age 60 to 64\"   \"Age 65 to 69\"   \"Age 70 to 74\"  \n[13] \"Age 75 or over\"\n\n\n\ncat(attr(frs_benunit2223_short$famtypbu,\"label\"))\n\nFamily Type\n\n\n\nnames(attr(frs_benunit2223_short$famtypbu,\"labels\"))\n\n[1] \"Any other category\"      \"Pensioner couple\"       \n[3] \"Pensioner single\"        \"Couple with children\"   \n[5] \"Couple without children\" \"Lone parent\"            \n[7] \"Single without children\"\n\n\nYour turn!\nUse the frs_pension2223_short dataset to get an idea about the variables.\n\nList the names of the variables in frs_pension2223_short dataset. Use names() function.\nReturn the six first rows in frs_pension2223_short dataset. Use head() function.\nCreate labels and labels attributes for the variables PENPAY and PENTYPE. Use cat(attr()) and names(attr()) functions.\n\nOutcome!\n\nNames of the variables in frs_pension2223_short dataset:\n\n\nnames(frs_pension2223_short) \n\n[1] \"SERNUM\"  \"BENUNIT\" \"PERSON\"  \"PENPAY\"  \"PENTYPE\"\n\n\n\nThe six first rows in frs_pension2223_short dataset:\n\n\nhead(data.frame(frs_pension2223_short))\n\n  SERNUM BENUNIT PERSON    PENPAY PENTYPE\n1     10       1      2  59.67000       1\n2     14       1      1 148.43836       1\n3     15       1      1 276.16438       1\n4     16       1      1  35.45490       1\n5     16       1      1 144.21534       1\n6     16       1      2  53.00745       1\n\n\n\nLabels and labels attributes for the variables PENPAY and PENTYPE:\n\n\nLabel of the variable PENPAY:\n\n\ncat(attr(frs_pension2223_short$PENPAY,\"label\"))\n\nAmount of last payment from pension\n\n\n\nLabel attribute of the variable PENPAY:\n\n\nnames(attr(frs_pension2223_short$PENPAY,\"labels\"))\n\nNULL\n\n\n\nLabel of the variable PENTYPE:\n\n\ncat(attr(frs_pension2223_short$PENTYPE,\"label\"))\n\nPension Type\n\n\n\nLabel attribute for the variable PENTYPE:\n\n\nnames(attr(frs_pension2223_short$PENTYPE,\"labels\"))\n\n[1] \"Employee pension - occupational, workplace, group personal\"  \n[2] \"Individual personal pension\"                                 \n[3] \"Survivor‹s pension (workplace or individual personal pension\"\n[4] \"Income from an annuity ’ not purchased with pension funds\"   \n[5] \"Income from a trust or covenant\"                             \n[6] \"Share of employee or personal pension from ex-spouse/partner\"\n\n\n\nQuestionsAnswers\n\n\n\nWhat is the value for ‘Amount of last pension payment’ of person 2 from benefit unit 1 with serial no. 16 in the frs_pension2223_short dataset?\nWhy is the outcome of the ‘labels’ attribute of ‘PENPAY’ NULL?\n\n\n\n\nThe value for ‘Amount of last pension payment’ of person 2 from benefit unit 1 with serial no. 16 in the frs_pension2223_short dataset is 53.00745.\nPENPAY is a continuous variable that measures ‘Amount of last payment from pension’; therefore, the outcome of ‘labels’ attribute of PENPAY is NULL.",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using R"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using R.html#descriptive-analysis",
    "href": "Hierarchical and Flat File_Using R.html#descriptive-analysis",
    "title": "Exercise 1 : Using R",
    "section": "Descriptive analysis",
    "text": "Descriptive analysis\n\nExamining variables\nLet’s now examine the frequency of the variables HEALTH1, SEX, and IAGEGR4 in the frs_adult2223_short dataset.\nWe can use the table() function to create a frequency table.\n\ntable (frs_adult2223_short$HEALTH1)     #Create a frequency table for the variable HEALTH1 \n\n\n    1     2 \n18308 24172 \n\n\n\ntable(frs_adult2223_short$SEX)          #Create a frequency table for the variable SEX\n\n\n    1     2 \n20143 22337 \n\n\n\ntable(frs_adult2223_short$IAGEGR4)      #Create a frequency table for the variable IAGEGR4\n\n\n   4    5    6    7    8    9   10   11   12   13   14   15   16 \n 587 1864 2506 3108 3341 3367 3002 3401 3763 3894 3751 3830 6066 \n\n\nWe can use the as_factor() function (included in the haven package) to convert the categorical variables HEALTH1, SEX, and IAGEGR4 into factor variables. The newly generated factor variables HEALTH1f, SEXf, and IAGEGR4f are equivalent to categorical variables.\n\nfrs_adult2223_short$HEALTH1f&lt;-as_factor(frs_adult2223_short$HEALTH1)      #Create a new factor variable HEALTH1f from the original variable HEALTH1\n\n\nfrs_adult2223_short$SEXf&lt;-as_factor(frs_adult2223_short$SEX)            # Create a new factor variable SEXf from the original variable SEX     \n\n\nfrs_adult2223_short$IAGEGR4f&lt;-as_factor(frs_adult2223_short$IAGEGR4)    # Create a new factor variable IAGEGR4f from the original variable IAGEGR4\n\n\ntable(frs_adult2223_short$HEALTH1f)       # Create a frequency table for the new factor variable HEALTH1f\n\n\n  Yes    No \n18308 24172 \n\n\n\ntable(frs_adult2223_short$SEXf)           # Create a frequency table for the new factor variable SEXf\n\n\n  Male Female \n 20143  22337 \n\n\n\ntable(frs_adult2223_short$IAGEGR4f)       # Create a frequency table for the new factor variable IAGEGR4f\n\n\n  Age 16 to 19   Age 20 to 24   Age 25 to 29   Age 30 to 34   Age 35 to 39 \n           587           1864           2506           3108           3341 \n  Age 40 to 44   Age 45 to 49   Age 50 to 54   Age 55 to 59   Age 60 to 64 \n          3367           3002           3401           3763           3894 \n  Age 65 to 69   Age 70 to 74 Age 75 or over \n          3751           3830           6066 \n\n\nLet’s now examine the frequency of the variable famtypbu in the frs_ benunit2223_short dataset.\n\ntable (frs_benunit2223_short$famtypbu)  # Create a frequency table for the variable famtypbu  \n\n\n   1    2    3    4    5    6 \n4312 4787 4642 5057 1563 8268 \n\n\n\nfrs_benunit2223_short$famtypbuf&lt;-as_factor(frs_benunit2223_short$famtypbu) # Create a new factor variable famtypbuf from the original variable famtypbu\n\n\ntable(frs_benunit2223_short$famtypbuf)  # Create a frequency table for the new factor variable famtypbuf\n\n\n     Any other category        Pensioner couple        Pensioner single \n                      0                    4312                    4787 \n   Couple with children Couple without children             Lone parent \n                   4642                    5057                    1563 \nSingle without children \n                   8268 \n\n\nThe amount of last payment from pension PENPAY is a continuous variable. So, we will use summary() instead of table(). The summary() function provides a summary of the main statistics including the minimum and maximum values, the mean, the median and the quartiles. This function is useful for assessing and detecting extreme values.\n\n summary(frs_pension2223_short$PENPAY)      #Create a summary table for the variable PENPAY\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.      NA's \n   0.0002   32.2192   88.1425  155.2260  211.2370 1562.5645       490 \n\n\nYour turn!\nUse the frs_pension2223_short dataset to examine respondents’ pension type PENTYPE.\n\nCreate a frequency table to measure pension type PENTYPE. Use table() function\nAssess the results and decide if you need to convert PENTYPE into a factor variable. Use as_factor if needed.\n\nOutcome!\n\nFrequency table of PENTYPE from the frs_ pension2223_short dataset:\n\n\ntable (frs_pension2223_short$PENTYPE)       # Create a frequency table for the variable PENTYPE\n\n\n    1     2     3     4     5     6 \n11156  2845   880   211    53    88 \n\n\n\nConverting PENTYPE into a factor variable PENTYPEf\n\n\nfrs_pension2223_short$PENTYPEf&lt;-as_factor(frs_pension2223_short$PENTYPE)    # Create a new factor variable PENTYPEf from the original variable 'PENTYPE’\n\n\nFrequency table of the new factor variable PENTYPEf\n\n\ntable(frs_pension2223_short$PENTYPEf)       # Create a frequency table for the new factor variable PENTYPEf\n\n\n  Employee pension - occupational, workplace, group personal \n                                                       11156 \n                                 Individual personal pension \n                                                        2845 \nSurvivor‹s pension (workplace or individual personal pension \n                                                         880 \n   Income from an annuity ’ not purchased with pension funds \n                                                         211 \n                             Income from a trust or covenant \n                                                          53 \nShare of employee or personal pension from ex-spouse/partner \n                                                          88",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using R"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using R.html#explore-the-datasets-1",
    "href": "Hierarchical and Flat File_Using R.html#explore-the-datasets-1",
    "title": "Exercise 1 : Using R",
    "section": "Explore the datasets",
    "text": "Explore the datasets\nLet’s have a look at frs_frs2223_short dataset, the short version we have created from the flat file frs_frs2223.\n\ndim(frs_frs2223_short)        #Gives the number of rows (observations) and columns (variables)\n\n[1] 28629     6\n\n\n\nnames(frs_frs2223_short)      #List variable names in their actual order in the dataset\n\n[1] \"SERNUM\"   \"BENUNIT\"  \"PERSONHD\" \"HEALTHHD\" \"SEXHD\"    \"FAMTYPBU\"\n\n\n\nhead(data.frame(frs_frs2223_short))       #Displays the first six lines of a dataset\n\n  SERNUM BENUNIT PERSONHD HEALTHHD SEXHD FAMTYPBU\n1      1       1        1        1     1        3\n2      2       1        1        2     1        6\n3      2       2        2        2     1        6\n4      2       3        3        2     1        6\n5      3       1        1        2     1        3\n6      4       1        1        2     1        1\n\n\nNow, let’s learn more about the available variables.\nWe will use the attr() function to get variables attributes ‘label’, which is the descriptions of the variable, and ‘labels’, which are the value labels.\nLet’s examine the variables’ descriptions and value labels of HEALTHHD and SEXHD from frs_frs2223_short dataset.\n\ncat(attr(frs_frs2223_short$HEALTHHD,\"label\")) \n\nWhether has a long standing illness\n\n\n\nnames(attr(frs_frs2223_short$HEALTHHD,\"labels\"))\n\n[1] \"Yes\" \"No\" \n\n\n\ncat(attr(frs_frs2223_short$SEXHD,\"label\"))\n\nSex\n\n\n\nnames(attr(frs_frs2223_short$SEXHD,\"labels\"))\n\nNULL\n\n\nNote: the outcome of the ‘labels’ of SEXHD is Null because the value labels of SEXHD in the original dataset is entered as None. \nWhat about variable’s description and value label of FAMTYPBU from frs_frs2223_short dataset?\n\ncat(attr(frs_frs2223_short$FAMTYPBU,\"label\"))\n\nFamily Type\n\n\n\nnames(attr(frs_frs2223_short$FAMTYPBU,\"labels\"))\n\n[1] \"Any other category\"      \"Pensioner couple\"       \n[3] \"Pensioner single\"        \"Couple with children\"   \n[5] \"Couple without children\" \"Lone parent\"            \n[7] \"Single without children\"\n\n\n\nQuestionsAnswers\n\n\nCompare the descriptions and value labels of the variables that measure long standing illness ‘HEALTH1’ and Sex ‘SEX’ (in frs_adult2223_short datasets) and Family type ‘famtypbu’ (in the frs_benunit2223_short dataset) with those that measures the same variables in frs_frs2223_short dataset (HEALTHHD, SEXHD and FAMTYPBU, respectively).\n\n\n\nLong standing illness in frs_adult2223_short dataset: both the descriptions and value labels are same as in the flat file. (b) Sex in frs_adult2223_short dataset: only variable descriptions is same as in the flat file. (c) Family type in the frs_benunit2223_short dataset: both the description and value labels are same as in the flat file.\n\nHowever, the variables’ names in the flat file are slightly different than those in the hierarchical files.",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using R"
    ]
  },
  {
    "objectID": "Hierarchical and Flat File_Using R.html#descriptive-analysis-1",
    "href": "Hierarchical and Flat File_Using R.html#descriptive-analysis-1",
    "title": "Exercise 1 : Using R",
    "section": "Descriptive analysis",
    "text": "Descriptive analysis\n\nExamining variables\nLet’s now examine the frequency of the variables HEALTHHD, SEXHD and FAMTYPBU in frs_frs2223_short dataset.\nWe will use the table() function to create frequency tables.\n\ntable(frs_frs2223_short$HEALTHHD)\n\n\n    1     2 \n12781 15848 \n\n\n\ntable(frs_frs2223_short$SEXHD)\n\n\n    1     2 \n16225 12404 \n\n\n\ntable(frs_frs2223_short$FAMTYPBU)\n\n\n   1    2    3    4    5    6 \n4312 4787 4642 5057 1563 8268 \n\n\nTo understand the results, we will use the as_factor() function to convert the categorical variables HEALTHHD, SEXHD, and FAMTYPBU into the factor variables HEALTHHDf, SEXHDf, and FAMTYPBUf.\n\nfrs_frs2223_short$HEALTHHDf&lt;-as_factor(frs_frs2223_short$HEALTHHD)     # Create a new factor variable HEALTHHDf from the original variable HEALTHHD\n\n\nfrs_frs2223_short$SEXHDf&lt;-as_factor(frs_frs2223_short$SEXHD)         # Create a new factor variable SEXHDf from the original variable SEXHD\n\n\nfrs_frs2223_short$ FAMTYPBUf &lt;-as_factor(frs_frs2223_short$FAMTYPBU)  # Create a new factor variable FAMTYPBUf from the original variable FAMTYPBU \n\n\ntable(frs_frs2223_short$HEALTHHDf)            # Create a frequency table for the new factor variable HEALTHHDf\n\n\n  Yes    No \n12781 15848 \n\n\n\ntable(frs_frs2223_short$SEXHDf)               # Create a frequency table for the new factor variable SEXHDf      \n\n\n    1     2 \n16225 12404 \n\n\nNote: the values of some variables in the flat file table (such as SEXHD) are not labeled, even though they are labeled in the hierarchical tables. Therefore, the value labels in the frequency table of the new factor variable SEXHDf haven’t changed after converting the original variable SEXHD into a factor variable, as the value of SEXHD in the original dataset is entered as ‘None’.\nWhat about the frequency table of the new factor variable FAMTYPBUf from frs_frs2223_short dataset?\n\ntable(frs_frs2223_short$FAMTYPBUf)            # Create a frequency table for the new factor variable FAMTYPBUf\n\n\n     Any other category        Pensioner couple        Pensioner single \n                      0                    4312                    4787 \n   Couple with children Couple without children             Lone parent \n                   4642                    5057                    1563 \nSingle without children \n                   8268 \n\n\n\nQuestionsAnswers\n\n\n\nHow many observations are lone parent?\nHow many observations are not long standing illness?\nWhat do you notice about the frequencies of FAMTYPBUf in frs_frs2223_short dataset and the frequencies of the same variable famtypbuf in frs_benunit2223_short dataset?\n\n\n\n\nThere are 1563 lone parent.\nThere are 15854 persons responded didn’t have long standing illness.\nThe frequencies of the variables FAMTYPBUf in frs_frs2223_short dataset and famtypbuf in frs_benunit2223_short dataset are exactly the same as expected.",
    "crumbs": [
      "The Hierarchical and Flat File Datasets",
      "Exercise 1 : Using R"
    ]
  },
  {
    "objectID": "Merging Data and Applying Weights_Using SPSS.html#merging-data-in-spss",
    "href": "Merging Data and Applying Weights_Using SPSS.html#merging-data-in-spss",
    "title": "Exercise 2 : Using SPSS",
    "section": "Merging data in SPSS",
    "text": "Merging data in SPSS\nThere are several types of data merge in SPSS (one-to-one, one-to-many or many-to-one). So, when merging two datasets using three key variables, the number of observations in the merged dataset depends on the type of merge and the matching criteria based on the three key variables. For successful merge, make sure both datasets are sorted by the key variables before merging. If duplicates exist in one or both datasets for the key variables, SPSS will produce all combinations of matching rows. Therefore, it is important to handle any duplicates before merging datasets.\nIn this example, we will use one-to-many merge. So, we expect that the number of observations in the merged dataset will be equal to the number of observations in the smaller dataset that have all three key variables in the larger dataset. The exact number of observations in the merged dataset depends on how many of the three key variables match between the two datasets.\nThe two variables we are focusing on: SEX, which measures gender is in frs_adult2223_short, and PENTYPE, which measures Pension Type is in frs_pension2223_short.\nTo merge frs_adult2223_short and frs_pension2223_short datasets, we use the following code (we will name the new data merged_data):\nGET FILE='UKDA-9252-spss/spss/frs_pension2223_short.sav'.\nSORT CASES BY SERNUM BENUNIT PERSON.\n\nGET FILE='UKDA-9252-spss/spss/frs_adult2223_short.sav'.\nSORT CASES BY SERNUM BENUNIT PERSON.\n\nGET FILE='UKDA-9252-spss/spss/frs_pension2223_short.sav'.\nMATCH FILES /FILE=*\n  /TABLE='UKDA-9252-spss/spss/frs_adult2223_short.sav'\n  /BY SERNUM BENUNIT PERSON.\nEXECUTE.\n\nSave OUTFILE=\"merged_data.sav\"\n    /COMPRESSED\n\nQuestionsAnswers\n\n\n\nHow many observations in the new merged_data dataset?\nHow many variables in the new merged_data dataset?\nDid you expect that outcome?\n\n\n\n\nThere are 15233 observations in the new merged_data as in frs_pension2223_short dataset.\nThere are 9 variables in the new merged_data, which are the total number of variables in frs_adult2223_short and frs_pension2223_short datasets.\nThis outcome is expected because the new merged data will include all the matched observations (rows) based on the total number of unique key combinations in both datasets. In this case, the three unique keys we used from both datasets SERNUM, BENUNIT and PERSON matched 15233 observations between the two datasets frs_adult2223_short and frs_pension2223_short, which are all the observations in frs_pension2223_short dataset (the smaller dataset). Also, the number of variables in the new merged_data (9 variables) represents the total number of variables in frs_adult2223_short and frs_pension2223_short datasets.\n\n\n\n\nBefore we assess the association between PENTYPE and SEX, let’s check the frequencies of the two variables after merging the two datasets frs_adult2223_short and frs_pension2223_short.\nGET FILE='UKDA-9252-spss/spss/merged_data.sav.\nFREQUENCIES VARIABLES=SEX PENTYPE\n  /ORDER=ANALYSIS.\n\n\n\nSPSS output of frequencies of the variables SEX and PENTYPE in the merged_data dataset\n\n\nTo assess the association between pension type PENTYPE and gender SEX (how pension type varies by gender), we use the following code:\nGET FILE='UKDA-9252-spss/spss/merged_data.sav'.\nCROSSTABS\n  /TABLES=PENTYPE BY SEX\n  /FORMAT=AVALUE TABLES\n  /CELLS=COUNT COLUMN\n  /COUNT ROUND CELL.\n\n\n\nSPSS output of cross tabulation for the variables SEX and PENTYPE in the merged_data dataset\n\n\n\nQuestionsAnswers\n\n\n\nWhich type of pension was the least common for men and women?\n\n\n\n\n‘Share of employee or personal pension from ex-spouse/partner’ was the least common pension type for men. ‘Income from a trust or covenant’ was the least common pension type for women.",
    "crumbs": [
      "Merging Data and Applying Weights",
      "Exercise 2 : Using SPSS"
    ]
  },
  {
    "objectID": "Merging Data and Applying Weights_Using R.html#merging-data-in-r",
    "href": "Merging Data and Applying Weights_Using R.html#merging-data-in-r",
    "title": "Exercise 2 : Using R",
    "section": "Merging data in R",
    "text": "Merging data in R\nThere are several types of data merge in R (inner join, left join, right join, full outer join and cross join). So, when merging two datasets using three key variables, the number of observations in the merged dataset depends on the type of merge and how the key variables will match across the two datasets. For successful merge, the key variables must match exactly between the two datasets. Otherwise, observations will not match. Also, since the merge is carried out based on combinations of the three key variables, if two observations match based on one or two of the keys, they will not be merged.\nIn this example, we will use inner merge. So, we expect that the number of observations in the merged dataset will be equal to the number of observations in the smaller dataset that have all three key variables in the larger dataset. The exact number of observations in the merged dataset depends on how many of the three key variables match between the two datasets.\nThe two variables we are focusing on: SEXf, which measures gender is in frs_adult2223_short, and PENTYPE, which measures Pension Type is in frs_pension2223_short.\nTo merge frs_adult2223_short and frs_pension2223_short datasets, we use the following code (we will name the new data merged_data):\n\nmerged_data &lt;- merge(frs_adult2223_short,frs_pension2223_short, by = c(\"SERNUM\", \"BENUNIT\", \"PERSON\"))   # Specify which datasets to merge and which columns to use for merging\n\nNote: By default, if you do not specify the parameter ‘all’, the merge function carry out an inner join, which keeps only the rows that have matching values in all three key columns in both datasets.\n\nQuestionsAnswers\n\n\n\nHow many observations in the new merged_data dataset?\nHow many variables in the new merged_data dataset?\nDid you expect that outcome?\n\n\n\n\nThere are 15233 observations in the new merged_data as in frs_pension2223_short dataset.\nThere are 13 variables in the new merged_data including the four created factors, which is the total number of variables in both frs_adult2223_short and frs_pension2223_short datasets.\nThis outcome is expected because the new merged data will include all the matched observations (rows) based on the total number of unique key combinations in both datasets. In this case, the three unique keys we used from both datasets SERNUM, BENUNIT and PERSON matched 15233 observations between the two datasets frs_adult2223_short and frs_pension2223_short, which are all the observations in frs_pension2223_short dataset (the smaller dataset). Also, the number of variables in the new merged_data (13 variables) represents the total number of variables in frs_adult2223_short and frs_pension2223_short datasets.\n\n\ndim(merged_data)              # Get the number of observations and variables in the new merged_data dataset\n\n[1] 15233    13\n\n\n\nnames(merged_data)            #Get the names of variables in the new merged_data dataset\n\n [1] \"SERNUM\"   \"BENUNIT\"  \"PERSON\"   \"GROSS4\"   \"HEALTH1\"  \"SEX\"     \n [7] \"IAGEGR4\"  \"HEALTH1f\" \"SEXf\"     \"IAGEGR4f\" \"PENPAY\"   \"PENTYPE\" \n[13] \"PENTYPEf\"\n\n\n\n\n\nBefore we assess the association between PENTYPEf and SEXf, let’s check the frequencies of the two variables after merging the two datasets frs_adult2223_short and frs_pension2223_short.\n\ntable(merged_data$SEXf)       # Frequency tables of gender SEXf after merging frs_adult2223_short and frs_pension2223_short \n\n\n  Male Female \n  8244   6989 \n\n\n\ntable(merged_data$PENTYPEf)    # Frequency tables of pension type PENTYPEf after the merge\n\n\n  Employee pension - occupational, workplace, group personal \n                                                       11156 \n                                 Individual personal pension \n                                                        2845 \nSurvivor‹s pension (workplace or individual personal pension \n                                                         880 \n   Income from an annuity ’ not purchased with pension funds \n                                                         211 \n                             Income from a trust or covenant \n                                                          53 \nShare of employee or personal pension from ex-spouse/partner \n                                                          88 \n\n\nTo assess the association between pension type PENTYPEf and gender SEXf (how pension type varies by gender), we use the following code:\n\ntable(merged_data$PENTYPEf,merged_data$SEXf)     # How pension type varies by gender\n\n                                                              \n                                                               Male Female\n  Employee pension - occupational, workplace, group personal   6107   5049\n  Individual personal pension                                  1893    952\n  Survivor‹s pension (workplace or individual personal pension   98    782\n  Income from an annuity ’ not purchased with pension funds     113     98\n  Income from a trust or covenant                                27     26\n  Share of employee or personal pension from ex-spouse/partner    6     82\n\n\n\nQuestionsAnswers\n\n\n\nWhich type of pension was the least common for men and women?\n\n\n\n\n‘Share of employee or personal pension from ex-spouse/partner’ was the least common pension type for men. ‘Income from a trust or covenant’ was the least common pension type for women.",
    "crumbs": [
      "Merging Data and Applying Weights",
      "Exercise 2 : Using R"
    ]
  }
]